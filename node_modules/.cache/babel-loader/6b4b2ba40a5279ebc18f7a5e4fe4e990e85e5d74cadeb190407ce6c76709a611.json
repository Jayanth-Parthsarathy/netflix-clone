{"ast":null,"code":"var _jsxFileName = \"/home/jayanth/Documents/dev/netflix-clone/src/Row.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\nfunction Row(_ref) {\n  _s();\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster `,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","axios","useState","useEffect","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","console","log","map","movie","poster_path","backdrop_path","name","id"],"sources":["/home/jayanth/Documents/dev/netflix-clone/src/Row.js"],"sourcesContent":["import React from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport { useState, useEffect } from \"react\";\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            className={`row__poster `}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,WAAW;AAClB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAC5C,MAAMC,QAAQ,GAAG,qCAAqC;AAEtD,SAASC,GAAG,OAAkC;EAAA;EAAA,IAAjC;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAW,CAAC;EAC1C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxCC,SAAS,CAAC,MAAM;IACd,eAAeQ,SAAS,GAAG;MACzB,MAAMC,OAAO,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACN,QAAQ,CAAC;MACzCG,SAAS,CAACE,OAAO,CAACE,IAAI,CAACC,OAAO,CAAC;MAC/B,OAAOH,OAAO;IAChB;IACAD,SAAS,EAAE;EACb,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EACdS,OAAO,CAACC,GAAG,CAACR,MAAM,CAAC;EACnB,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAA,UAAKH;IAAK;MAAA;MAAA;MAAA;IAAA,QAAM,eAChB;MAAK,SAAS,EAAC,cAAc;MAAA,UAC1BG,MAAM,CAACS,GAAG,CAAEC,KAAK,iBAChB;QAEE,SAAS,EAAG,cAAc;QAC1B,GAAG,EAAG,GAAEf,QAAS,GACfI,UAAU,GAAGW,KAAK,CAACC,WAAW,GAAGD,KAAK,CAACE,aACxC,EAAE;QACH,GAAG,EAAEF,KAAK,CAACG;MAAK,GALXH,KAAK,CAACI,EAAE;QAAA;QAAA;QAAA;MAAA,QAOhB;IAAC;MAAA;MAAA;MAAA;IAAA,QACE;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,GA5BQlB,GAAG;AAAA,KAAHA,GAAG;AA8BZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}